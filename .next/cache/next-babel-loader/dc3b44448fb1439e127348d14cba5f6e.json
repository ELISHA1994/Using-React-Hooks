{"ast":null,"code":"var _jsxFileName = \"/Users/elishabello/Desktop/Programming/React/nextjs_react_hooks/src/ImageToggleOnScroll.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\n\nconst ImageToggleOnScroll = ({\n  primaryImg,\n  secondaryImg\n}) => {\n  const imageRef = useRef(null);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInview(isInView);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  });\n  const {\n    0: inView,\n    1: setInview\n  } = useState(false);\n\n  const isInView = () => {\n    if (imageRef.current) {\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  const scrollHandler = () => {\n    setInview(() => {\n      return isInView();\n    });\n  };\n\n  return __jsx(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: imageRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["/Users/elishabello/Desktop/Programming/React/nextjs_react_hooks/src/ImageToggleOnScroll.js"],"names":["React","useEffect","useRef","useState","ImageToggleOnScroll","primaryImg","secondaryImg","imageRef","window","addEventListener","scrollHandler","setInview","isInView","removeEventListener","inView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA;AAAb,CAAD,KAAgC;AAExD,QAAMC,QAAQ,GAAGL,MAAM,CAAC,IAAD,CAAvB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACAC,IAAAA,SAAS,CAACC,QAAD,CAAT;AACA,WAAS,MAAM;AACXJ,MAAAA,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCH,aAArC;AACH,KAFD;AAGH,GANQ,CAAT;AAQA,QAAM;AAAA,OAACI,MAAD;AAAA,OAAQH;AAAR,MAAqBR,QAAQ,CAAC,KAAD,CAAnC;;AAEA,QAAMS,QAAQ,GAAG,MAAM;AACnB,QAAIL,QAAQ,CAACQ,OAAb,EAAsB;AAClB,YAAMC,IAAI,GAAGT,QAAQ,CAACQ,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeX,MAAM,CAACY,WAA9C;AACH;;AACD,WAAO,KAAP;AACH,GAND;;AAOA,QAAMV,aAAa,GAAG,MAAM;AACxBC,IAAAA,SAAS,CAAC,MAAM;AACZ,aAAOC,QAAQ,EAAf;AACH,KAFQ,CAAT;AAGH,GAJD;;AAMA,SACI;AACI,IAAA,GAAG,EAAEE,MAAM,GAAGR,YAAH,GAAkBD,UADjC;AAEI,IAAA,GAAG,EAAC,EAFR;AAEW,IAAA,GAAG,EAAEE,QAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAMH,CAjCD;;AAmCA,eAAeH,mBAAf","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\n\nconst ImageToggleOnScroll = ({primaryImg, secondaryImg}) => {\n\n    const imageRef = useRef(null);\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", scrollHandler);\n        setInview(isInView);\n        return ( () => {\n            window.removeEventListener(\"scroll\", scrollHandler);\n        });\n    });\n\n    const [inView,setInview] = useState(false);\n\n    const isInView = () => {\n        if (imageRef.current) {\n            const rect = imageRef.current.getBoundingClientRect();\n            return rect.top >= 0 && rect.bottom <= window.innerHeight;\n        }\n        return false;\n    };\n    const scrollHandler = () => {\n        setInview(() => {\n            return isInView();\n        });\n    };\n\n    return (\n        <img\n            src={inView ? secondaryImg : primaryImg}\n            alt=\"\" ref={imageRef}\n        />\n    );\n};\n\nexport default ImageToggleOnScroll;\n"]},"metadata":{},"sourceType":"module"}