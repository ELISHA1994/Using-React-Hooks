{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/elishabello/Desktop/Programming/React/nextjs_react_hooks/src/ImageToggleOnScroll.js\";\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\n\nvar ImageTogglerOnScroll = function ImageTogglerOnScroll(_ref) {\n  var primaryImg = _ref.primaryImg,\n      secondaryImg = _ref.secondaryImg;\n  var imageRef = useRef(null);\n\n  var _useState = useState(true),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInview(isInView());\n    setIsLoading(false);\n    return function () {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, [isLoading]);\n\n  var _useState2 = useState(false),\n      inView = _useState2[0],\n      setInview = _useState2[1];\n\n  var isInView = function isInView() {\n    if (imageRef.current) {\n      var rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  var scrollHandler = function scrollHandler() {\n    setInview(function () {\n      return isInView();\n    });\n  };\n\n  return isLoading ? null : __jsx(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: imageRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default ImageTogglerOnScroll;","map":{"version":3,"sources":["/Users/elishabello/Desktop/Programming/React/nextjs_react_hooks/src/ImageToggleOnScroll.js"],"names":["React","useEffect","useRef","useState","ImageTogglerOnScroll","primaryImg","secondaryImg","imageRef","isLoading","setIsLoading","window","addEventListener","scrollHandler","setInview","isInView","removeEventListener","inView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAgC;AAAA,MAA9BC,UAA8B,QAA9BA,UAA8B;AAAA,MAAlBC,YAAkB,QAAlBA,YAAkB;AAEzD,MAAMC,QAAQ,GAAGL,MAAM,CAAC,IAAD,CAAvB;;AAFyD,kBAGvBC,QAAQ,CAAC,IAAD,CAHe;AAAA,MAGlDK,SAHkD;AAAA,MAGvCC,YAHuC;;AAKzDR,EAAAA,SAAS,CAAC,YAAM;AACZS,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACAC,IAAAA,SAAS,CAACC,QAAQ,EAAT,CAAT;AACAL,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,WAAS,YAAM;AACXC,MAAAA,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCH,aAArC;AACH,KAFD;AAGH,GAPQ,EAON,CAACJ,SAAD,CAPM,CAAT;;AALyD,mBAc9BL,QAAQ,CAAC,KAAD,CAdsB;AAAA,MAclDa,MAdkD;AAAA,MAc3CH,SAd2C;;AAgBzD,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,QAAIP,QAAQ,CAACU,OAAb,EAAsB;AAClB,UAAMC,IAAI,GAAGX,QAAQ,CAACU,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeX,MAAM,CAACY,WAA9C;AACH;;AACD,WAAO,KAAP;AACH,GAND;;AAOA,MAAMV,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxBC,IAAAA,SAAS,CAAC,YAAM;AACZ,aAAOC,QAAQ,EAAf;AACH,KAFQ,CAAT;AAGH,GAJD;;AAMA,SAAON,SAAS,GAAG,IAAH,GACZ;AACI,IAAA,GAAG,EAAEQ,MAAM,GAAGV,YAAH,GAAkBD,UADjC;AAEI,IAAA,GAAG,EAAC,EAFR;AAEW,IAAA,GAAG,EAAEE,QAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAMH,CAnCD;;AAqCA,eAAeH,oBAAf","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\n\nconst ImageTogglerOnScroll = ({primaryImg, secondaryImg}) => {\n\n    const imageRef = useRef(null);\n    const [isLoading, setIsLoading] = useState(true)\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", scrollHandler);\n        setInview(isInView());\n        setIsLoading(false);\n        return ( () => {\n            window.removeEventListener(\"scroll\", scrollHandler);\n        });\n    }, [isLoading]);\n\n    const [inView,setInview] = useState(false);\n\n    const isInView = () => {\n        if (imageRef.current) {\n            const rect = imageRef.current.getBoundingClientRect();\n            return rect.top >= 0 && rect.bottom <= window.innerHeight;\n        }\n        return false;\n    };\n    const scrollHandler = () => {\n        setInview(() => {\n            return isInView();\n        });\n    };\n\n    return isLoading ? null :  (\n        <img\n            src={inView ? secondaryImg : primaryImg}\n            alt=\"\" ref={imageRef}\n        />\n    );\n};\n\nexport default ImageTogglerOnScroll;\n"]},"metadata":{},"sourceType":"module"}